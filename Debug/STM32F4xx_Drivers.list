
STM32F4xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000664  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800080c  08000814  00010814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800080c  0800080c  00010814  2**0
                  CONTENTS
  4 .ARM          00000000  0800080c  0800080c  00010814  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800080c  08000814  00010814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800080c  0800080c  0001080c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000810  08000810  00010810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010814  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010814  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
 14 .debug_info   000008fa  00000000  00000000  00010887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000028c  00000000  00000000  00011181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b0  00000000  00000000  00011410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000079  00000000  00000000  000114c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001567  00000000  00000000  00011539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000dca  00000000  00000000  00012aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000050f2  00000000  00000000  0001386a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001fc  00000000  00000000  0001895c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00018b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080007f4 	.word	0x080007f4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080007f4 	.word	0x080007f4

080001e8 <GPIO_PeriClockControl>:
 *
 * - return		NONE
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx, uint8_t ENorDI)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d157      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a59      	ldr	r2, [pc, #356]	; (8000364 <GPIO_PeriClockControl+0x17c>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_RCLK_EN();
 8000202:	4b59      	ldr	r3, [pc, #356]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a58      	ldr	r2, [pc, #352]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
				GPIOH_RCLK_DI();
			}
	}


}
 800020e:	e0a3      	b.n	8000358 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a56      	ldr	r2, [pc, #344]	; (800036c <GPIO_PeriClockControl+0x184>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_RCLK_EN();
 8000218:	4b53      	ldr	r3, [pc, #332]	; (8000368 <GPIO_PeriClockControl+0x180>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a52      	ldr	r2, [pc, #328]	; (8000368 <GPIO_PeriClockControl+0x180>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e098      	b.n	8000358 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a51      	ldr	r2, [pc, #324]	; (8000370 <GPIO_PeriClockControl+0x188>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_RCLK_EN();
 800022e:	4b4e      	ldr	r3, [pc, #312]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a4d      	ldr	r2, [pc, #308]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e08d      	b.n	8000358 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a4d      	ldr	r2, [pc, #308]	; (8000374 <GPIO_PeriClockControl+0x18c>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_RCLK_EN();
 8000244:	4b48      	ldr	r3, [pc, #288]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a47      	ldr	r2, [pc, #284]	; (8000368 <GPIO_PeriClockControl+0x180>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e082      	b.n	8000358 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a48      	ldr	r2, [pc, #288]	; (8000378 <GPIO_PeriClockControl+0x190>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_RCLK_EN();
 800025a:	4b43      	ldr	r3, [pc, #268]	; (8000368 <GPIO_PeriClockControl+0x180>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a42      	ldr	r2, [pc, #264]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e077      	b.n	8000358 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a44      	ldr	r2, [pc, #272]	; (800037c <GPIO_PeriClockControl+0x194>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_RCLK_EN();
 8000270:	4b3d      	ldr	r3, [pc, #244]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a3c      	ldr	r2, [pc, #240]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e06c      	b.n	8000358 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a3f      	ldr	r2, [pc, #252]	; (8000380 <GPIO_PeriClockControl+0x198>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_RCLK_EN();
 8000286:	4b38      	ldr	r3, [pc, #224]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a37      	ldr	r2, [pc, #220]	; (8000368 <GPIO_PeriClockControl+0x180>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e061      	b.n	8000358 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a3b      	ldr	r2, [pc, #236]	; (8000384 <GPIO_PeriClockControl+0x19c>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d15d      	bne.n	8000358 <GPIO_PeriClockControl+0x170>
			GPIOH_RCLK_EN();
 800029c:	4b32      	ldr	r3, [pc, #200]	; (8000368 <GPIO_PeriClockControl+0x180>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a31      	ldr	r2, [pc, #196]	; (8000368 <GPIO_PeriClockControl+0x180>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e056      	b.n	8000358 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a2d      	ldr	r2, [pc, #180]	; (8000364 <GPIO_PeriClockControl+0x17c>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
				GPIOA_RCLK_DI();
 80002b2:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <GPIO_PeriClockControl+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a2c      	ldr	r2, [pc, #176]	; (8000368 <GPIO_PeriClockControl+0x180>)
 80002b8:	f023 0301 	bic.w	r3, r3, #1
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e04b      	b.n	8000358 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOB)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a2a      	ldr	r2, [pc, #168]	; (800036c <GPIO_PeriClockControl+0x184>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
				GPIOB_RCLK_DI();
 80002c8:	4b27      	ldr	r3, [pc, #156]	; (8000368 <GPIO_PeriClockControl+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a26      	ldr	r2, [pc, #152]	; (8000368 <GPIO_PeriClockControl+0x180>)
 80002ce:	f023 0302 	bic.w	r3, r3, #2
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e040      	b.n	8000358 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOC)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a25      	ldr	r2, [pc, #148]	; (8000370 <GPIO_PeriClockControl+0x188>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
				GPIOC_RCLK_DI();
 80002de:	4b22      	ldr	r3, [pc, #136]	; (8000368 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a21      	ldr	r2, [pc, #132]	; (8000368 <GPIO_PeriClockControl+0x180>)
 80002e4:	f023 0304 	bic.w	r3, r3, #4
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e035      	b.n	8000358 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOD)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a21      	ldr	r2, [pc, #132]	; (8000374 <GPIO_PeriClockControl+0x18c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
				GPIOD_RCLK_DI();
 80002f4:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a1b      	ldr	r2, [pc, #108]	; (8000368 <GPIO_PeriClockControl+0x180>)
 80002fa:	f023 0308 	bic.w	r3, r3, #8
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e02a      	b.n	8000358 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOE)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a1c      	ldr	r2, [pc, #112]	; (8000378 <GPIO_PeriClockControl+0x190>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
				GPIOE_RCLK_DI();
 800030a:	4b17      	ldr	r3, [pc, #92]	; (8000368 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a16      	ldr	r2, [pc, #88]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000310:	f023 0310 	bic.w	r3, r3, #16
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e01f      	b.n	8000358 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOF)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a18      	ldr	r2, [pc, #96]	; (800037c <GPIO_PeriClockControl+0x194>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
				GPIOF_RCLK_DI();
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a10      	ldr	r2, [pc, #64]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000326:	f023 0320 	bic.w	r3, r3, #32
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e014      	b.n	8000358 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOG)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a13      	ldr	r2, [pc, #76]	; (8000380 <GPIO_PeriClockControl+0x198>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
				GPIOG_RCLK_DI();
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <GPIO_PeriClockControl+0x180>)
 800033c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e009      	b.n	8000358 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOH)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <GPIO_PeriClockControl+0x19c>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d105      	bne.n	8000358 <GPIO_PeriClockControl+0x170>
				GPIOH_RCLK_DI();
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a05      	ldr	r2, [pc, #20]	; (8000368 <GPIO_PeriClockControl+0x180>)
 8000352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40020000 	.word	0x40020000
 8000368:	40023800 	.word	0x40023800
 800036c:	40020400 	.word	0x40020400
 8000370:	40020800 	.word	0x40020800
 8000374:	40020c00 	.word	0x40020c00
 8000378:	40021000 	.word	0x40021000
 800037c:	40021400 	.word	0x40021400
 8000380:	40021800 	.word	0x40021800
 8000384:	40021c00 	.word	0x40021c00

08000388 <GPIO_Init>:
 *
 * - return		NONE
 *
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandle)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	//Temporary value
	uint32_t temp = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]

	//Configure the MODE of a certain PIN
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	795b      	ldrb	r3, [r3, #5]
 8000398:	2b03      	cmp	r3, #3
 800039a:	d81f      	bhi.n	80003dc <GPIO_Init+0x54>
	{
		//Get certain value based on PIN MODE and PIN NUMBER then write the value
		//into the PIN REGISTER
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	795b      	ldrb	r3, [r3, #5]
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	791b      	ldrb	r3, [r3, #4]
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ac:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clearing the BITfield
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	4619      	mov	r1, r3
 80003ba:	2303      	movs	r3, #3
 80003bc:	408b      	lsls	r3, r1
 80003be:	43db      	mvns	r3, r3
 80003c0:	4619      	mov	r1, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	400a      	ands	r2, r1
 80003c8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Setting  the BITfield
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	6819      	ldr	r1, [r3, #0]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	430a      	orrs	r2, r1
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	e07d      	b.n	80004d8 <GPIO_Init+0x150>
	}
	else
	{
		//Refering to IBTERRUPT MODES
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	2b04      	cmp	r3, #4
 80003e2:	d117      	bne.n	8000414 <GPIO_Init+0x8c>
		{
			// configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e4:	4b8e      	ldr	r3, [pc, #568]	; (8000620 <GPIO_Init+0x298>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7912      	ldrb	r2, [r2, #4]
 80003ec:	4611      	mov	r1, r2
 80003ee:	2201      	movs	r2, #1
 80003f0:	408a      	lsls	r2, r1
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a8a      	ldr	r2, [pc, #552]	; (8000620 <GPIO_Init+0x298>)
 80003f6:	430b      	orrs	r3, r1
 80003f8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003fa:	4b89      	ldr	r3, [pc, #548]	; (8000620 <GPIO_Init+0x298>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	7912      	ldrb	r2, [r2, #4]
 8000402:	4611      	mov	r1, r2
 8000404:	2201      	movs	r2, #1
 8000406:	408a      	lsls	r2, r1
 8000408:	43d2      	mvns	r2, r2
 800040a:	4611      	mov	r1, r2
 800040c:	4a84      	ldr	r2, [pc, #528]	; (8000620 <GPIO_Init+0x298>)
 800040e:	400b      	ands	r3, r1
 8000410:	6093      	str	r3, [r2, #8]
 8000412:	e036      	b.n	8000482 <GPIO_Init+0xfa>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	2b05      	cmp	r3, #5
 800041a:	d117      	bne.n	800044c <GPIO_Init+0xc4>
		{
			// configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800041c:	4b80      	ldr	r3, [pc, #512]	; (8000620 <GPIO_Init+0x298>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	7912      	ldrb	r2, [r2, #4]
 8000424:	4611      	mov	r1, r2
 8000426:	2201      	movs	r2, #1
 8000428:	408a      	lsls	r2, r1
 800042a:	4611      	mov	r1, r2
 800042c:	4a7c      	ldr	r2, [pc, #496]	; (8000620 <GPIO_Init+0x298>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000432:	4b7b      	ldr	r3, [pc, #492]	; (8000620 <GPIO_Init+0x298>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	408a      	lsls	r2, r1
 8000440:	43d2      	mvns	r2, r2
 8000442:	4611      	mov	r1, r2
 8000444:	4a76      	ldr	r2, [pc, #472]	; (8000620 <GPIO_Init+0x298>)
 8000446:	400b      	ands	r3, r1
 8000448:	60d3      	str	r3, [r2, #12]
 800044a:	e01a      	b.n	8000482 <GPIO_Init+0xfa>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	795b      	ldrb	r3, [r3, #5]
 8000450:	2b06      	cmp	r3, #6
 8000452:	d116      	bne.n	8000482 <GPIO_Init+0xfa>
		{
			//configure both (FALLING AND RISING EGDE )
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000454:	4b72      	ldr	r3, [pc, #456]	; (8000620 <GPIO_Init+0x298>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	7912      	ldrb	r2, [r2, #4]
 800045c:	4611      	mov	r1, r2
 800045e:	2201      	movs	r2, #1
 8000460:	408a      	lsls	r2, r1
 8000462:	4611      	mov	r1, r2
 8000464:	4a6e      	ldr	r2, [pc, #440]	; (8000620 <GPIO_Init+0x298>)
 8000466:	430b      	orrs	r3, r1
 8000468:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800046a:	4b6d      	ldr	r3, [pc, #436]	; (8000620 <GPIO_Init+0x298>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	43d2      	mvns	r2, r2
 800047a:	4611      	mov	r1, r2
 800047c:	4a68      	ldr	r2, [pc, #416]	; (8000620 <GPIO_Init+0x298>)
 800047e:	430b      	orrs	r3, r1
 8000480:	60d3      	str	r3, [r2, #12]

		}

		//configure GPIO port selection in SYSCFG_EXTICR
		uint8_t EXTICR_RegNum = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	089b      	lsrs	r3, r3, #2
 8000488:	72fb      	strb	r3, [r7, #11]
		uint8_t EXTICR_BitPosition = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	f003 0303 	and.w	r3, r3, #3
 8000492:	72bb      	strb	r3, [r7, #10]

		SYSCFG_RCLK_EN();
 8000494:	4b63      	ldr	r3, [pc, #396]	; (8000624 <GPIO_Init+0x29c>)
 8000496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000498:	4a62      	ldr	r2, [pc, #392]	; (8000624 <GPIO_Init+0x29c>)
 800049a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049e:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t portCode = CodeFromPinNum(pGPIOHandle->pGPIOx);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 f8d7 	bl	8000658 <CodeFromPinNum>
 80004aa:	4603      	mov	r3, r0
 80004ac:	727b      	strb	r3, [r7, #9]
		SYSCFG->EXTICR[EXTICR_RegNum] = (portCode << EXTICR_BitPosition*4);
 80004ae:	7a7a      	ldrb	r2, [r7, #9]
 80004b0:	7abb      	ldrb	r3, [r7, #10]
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	fa02 f103 	lsl.w	r1, r2, r3
 80004b8:	4a5b      	ldr	r2, [pc, #364]	; (8000628 <GPIO_Init+0x2a0>)
 80004ba:	7afb      	ldrb	r3, [r7, #11]
 80004bc:	3302      	adds	r3, #2
 80004be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c2:	4b57      	ldr	r3, [pc, #348]	; (8000620 <GPIO_Init+0x298>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	7912      	ldrb	r2, [r2, #4]
 80004ca:	4611      	mov	r1, r2
 80004cc:	2201      	movs	r2, #1
 80004ce:	408a      	lsls	r2, r1
 80004d0:	4611      	mov	r1, r2
 80004d2:	4a53      	ldr	r2, [pc, #332]	; (8000620 <GPIO_Init+0x298>)
 80004d4:	430b      	orrs	r3, r1
 80004d6:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]

	//init the rest - pincofig values write into the pin register
	//output type
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	685a      	ldr	r2, [r3, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	4619      	mov	r1, r3
 80004e8:	2301      	movs	r3, #1
 80004ea:	408b      	lsls	r3, r1
 80004ec:	43db      	mvns	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	400a      	ands	r2, r1
 80004f6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	685a      	ldr	r2, [r3, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	7a1b      	ldrb	r3, [r3, #8]
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	4619      	mov	r1, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	430a      	orrs	r2, r1
 8000514:	605a      	str	r2, [r3, #4]

	//configure the speed
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	689a      	ldr	r2, [r3, #8]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	4619      	mov	r1, r3
 8000522:	2303      	movs	r3, #3
 8000524:	408b      	lsls	r3, r1
 8000526:	43db      	mvns	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	400a      	ands	r2, r1
 8000530:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	799b      	ldrb	r3, [r3, #6]
 800053c:	4619      	mov	r1, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	fa01 f303 	lsl.w	r3, r1, r3
 8000548:	4619      	mov	r1, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	430a      	orrs	r2, r1
 8000550:	609a      	str	r2, [r3, #8]

	//Pull up/pull down conf
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	4619      	mov	r1, r3
 800055e:	2303      	movs	r3, #3
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	4619      	mov	r1, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	400a      	ands	r2, r1
 800056c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	79db      	ldrb	r3, [r3, #7]
 8000578:	4619      	mov	r1, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	4619      	mov	r1, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	430a      	orrs	r2, r1
 800058c:	60da      	str	r2, [r3, #12]

	//Alternative function configuration
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	795b      	ldrb	r3, [r3, #5]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d140      	bne.n	8000618 <GPIO_Init+0x290>
	{
		//LOW
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	2b07      	cmp	r3, #7
 800059c:	d81e      	bhi.n	80005dc <GPIO_Init+0x254>
		{
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6a1a      	ldr	r2, [r3, #32]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	4619      	mov	r1, r3
 80005aa:	230f      	movs	r3, #15
 80005ac:	408b      	lsls	r3, r1
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	400a      	ands	r2, r1
 80005b8:	621a      	str	r2, [r3, #32]
			pGPIOHandle-> pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6a1a      	ldr	r2, [r3, #32]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7a5b      	ldrb	r3, [r3, #9]
 80005c4:	4619      	mov	r1, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	fa01 f303 	lsl.w	r3, r1, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	430a      	orrs	r2, r1
 80005d8:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
			pGPIOHandle-> pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		}
	}

}
 80005da:	e01d      	b.n	8000618 <GPIO_Init+0x290>
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	4619      	mov	r1, r3
 80005e8:	230f      	movs	r3, #15
 80005ea:	408b      	lsls	r3, r1
 80005ec:	43db      	mvns	r3, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	400a      	ands	r2, r1
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle-> pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	7a5b      	ldrb	r3, [r3, #9]
 8000602:	4619      	mov	r1, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	4619      	mov	r1, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	430a      	orrs	r2, r1
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40013c00 	.word	0x40013c00
 8000624:	40023800 	.word	0x40023800
 8000628:	40013800 	.word	0x40013800

0800062c <GPIOToggleOutputPin>:
 * - parameter
 * - return
 *
 */
void GPIOToggleOutputPin(GPIO_RegDef_t* pGPIOx, uint8_t pinNumber)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	78fa      	ldrb	r2, [r7, #3]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	405a      	eors	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	615a      	str	r2, [r3, #20]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <CodeFromPinNum>:




uint8_t CodeFromPinNum(GPIO_RegDef_t* pGPIOx)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if(pGPIOx == GPIOA)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <CodeFromPinNum+0x74>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d101      	bne.n	800066c <CodeFromPinNum+0x14>
	{
		return 0;
 8000668:	2300      	movs	r3, #0
 800066a:	e029      	b.n	80006c0 <CodeFromPinNum+0x68>
	}
	else if(pGPIOx == GPIOB)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <CodeFromPinNum+0x78>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d101      	bne.n	8000678 <CodeFromPinNum+0x20>
	{
		return 1;
 8000674:	2301      	movs	r3, #1
 8000676:	e023      	b.n	80006c0 <CodeFromPinNum+0x68>
	}
	else if(pGPIOx == GPIOC)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <CodeFromPinNum+0x7c>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d101      	bne.n	8000684 <CodeFromPinNum+0x2c>
	{
		return 2;
 8000680:	2302      	movs	r3, #2
 8000682:	e01d      	b.n	80006c0 <CodeFromPinNum+0x68>
	}
	else if(pGPIOx == GPIOD)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <CodeFromPinNum+0x80>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d101      	bne.n	8000690 <CodeFromPinNum+0x38>
	{
		return 3;
 800068c:	2303      	movs	r3, #3
 800068e:	e017      	b.n	80006c0 <CodeFromPinNum+0x68>
	}
	else if(pGPIOx == GPIOE)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <CodeFromPinNum+0x84>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d101      	bne.n	800069c <CodeFromPinNum+0x44>
	{
		return 4;
 8000698:	2304      	movs	r3, #4
 800069a:	e011      	b.n	80006c0 <CodeFromPinNum+0x68>
	}
	else if(pGPIOx == GPIOF)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <CodeFromPinNum+0x88>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d101      	bne.n	80006a8 <CodeFromPinNum+0x50>
	{
		return 5;
 80006a4:	2305      	movs	r3, #5
 80006a6:	e00b      	b.n	80006c0 <CodeFromPinNum+0x68>
	}
	else if(pGPIOx == GPIOG)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <CodeFromPinNum+0x8c>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d101      	bne.n	80006b4 <CodeFromPinNum+0x5c>
	{
		return 6;
 80006b0:	2306      	movs	r3, #6
 80006b2:	e005      	b.n	80006c0 <CodeFromPinNum+0x68>
	}
	else if(pGPIOx == GPIOH)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a0c      	ldr	r2, [pc, #48]	; (80006e8 <CodeFromPinNum+0x90>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d101      	bne.n	80006c0 <CodeFromPinNum+0x68>
	{
		return 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	e7ff      	b.n	80006c0 <CodeFromPinNum+0x68>
	}

}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020800 	.word	0x40020800
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40021400 	.word	0x40021400
 80006e4:	40021800 	.word	0x40021800
 80006e8:	40021c00 	.word	0x40021c00

080006ec <delay>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<500000; i++);
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	e002      	b.n	80006fe <delay+0x12>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3301      	adds	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <delay+0x28>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d9f8      	bls.n	80006f8 <delay+0xc>
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	0007a11f 	.word	0x0007a11f

08000718 <main>:

int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
    //Toggle LED PUSH-PULL Config
	GPIO_Handle_t GPIOLED_Toggle;

	//create GPIO Reg Obj
	GPIOLED_Toggle.pGPIOx = GPIOD;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <main+0x3c>)
 8000720:	607b      	str	r3, [r7, #4]

	//Cofiguration of the GPIO Obj
	GPIOLED_Toggle.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000722:	230c      	movs	r3, #12
 8000724:	723b      	strb	r3, [r7, #8]
	GPIOLED_Toggle.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000726:	2301      	movs	r3, #1
 8000728:	727b      	strb	r3, [r7, #9]
	GPIOLED_Toggle.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HS;
 800072a:	2302      	movs	r3, #2
 800072c:	72bb      	strb	r3, [r7, #10]
	GPIOLED_Toggle.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_PP;
 800072e:	2300      	movs	r3, #0
 8000730:	733b      	strb	r3, [r7, #12]
	GPIOLED_Toggle.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PULLUPDOWN_NOPUPD;
 8000732:	2300      	movs	r3, #0
 8000734:	72fb      	strb	r3, [r7, #11]

	//Enable the clock
	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000736:	2101      	movs	r1, #1
 8000738:	4806      	ldr	r0, [pc, #24]	; (8000754 <main+0x3c>)
 800073a:	f7ff fd55 	bl	80001e8 <GPIO_PeriClockControl>

	//Initalization of GPIO port
	GPIO_Init(&GPIOLED_Toggle);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe21 	bl	8000388 <GPIO_Init>

	while(1)
	{
		GPIOToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000746:	210c      	movs	r1, #12
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <main+0x3c>)
 800074a:	f7ff ff6f 	bl	800062c <GPIOToggleOutputPin>
		delay();
 800074e:	f7ff ffcd 	bl	80006ec <delay>
		GPIOToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000752:	e7f8      	b.n	8000746 <main+0x2e>
 8000754:	40020c00 	.word	0x40020c00

08000758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800075c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <LoopForever+0x6>)
  ldr r1, =_edata
 8000762:	490d      	ldr	r1, [pc, #52]	; (8000798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000764:	4a0d      	ldr	r2, [pc, #52]	; (800079c <LoopForever+0xe>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000778:	4c0a      	ldr	r4, [pc, #40]	; (80007a4 <LoopForever+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000786:	f000 f811 	bl	80007ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078a:	f7ff ffc5 	bl	8000718 <main>

0800078e <LoopForever>:

LoopForever:
  b LoopForever
 800078e:	e7fe      	b.n	800078e <LoopForever>
  ldr   r0, =_estack
 8000790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800079c:	08000814 	.word	0x08000814
  ldr r2, =_sbss
 80007a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007a4:	2000001c 	.word	0x2000001c

080007a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC_IRQHandler>
	...

080007ac <__libc_init_array>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	4d0d      	ldr	r5, [pc, #52]	; (80007e4 <__libc_init_array+0x38>)
 80007b0:	4c0d      	ldr	r4, [pc, #52]	; (80007e8 <__libc_init_array+0x3c>)
 80007b2:	1b64      	subs	r4, r4, r5
 80007b4:	10a4      	asrs	r4, r4, #2
 80007b6:	2600      	movs	r6, #0
 80007b8:	42a6      	cmp	r6, r4
 80007ba:	d109      	bne.n	80007d0 <__libc_init_array+0x24>
 80007bc:	4d0b      	ldr	r5, [pc, #44]	; (80007ec <__libc_init_array+0x40>)
 80007be:	4c0c      	ldr	r4, [pc, #48]	; (80007f0 <__libc_init_array+0x44>)
 80007c0:	f000 f818 	bl	80007f4 <_init>
 80007c4:	1b64      	subs	r4, r4, r5
 80007c6:	10a4      	asrs	r4, r4, #2
 80007c8:	2600      	movs	r6, #0
 80007ca:	42a6      	cmp	r6, r4
 80007cc:	d105      	bne.n	80007da <__libc_init_array+0x2e>
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d4:	4798      	blx	r3
 80007d6:	3601      	adds	r6, #1
 80007d8:	e7ee      	b.n	80007b8 <__libc_init_array+0xc>
 80007da:	f855 3b04 	ldr.w	r3, [r5], #4
 80007de:	4798      	blx	r3
 80007e0:	3601      	adds	r6, #1
 80007e2:	e7f2      	b.n	80007ca <__libc_init_array+0x1e>
 80007e4:	0800080c 	.word	0x0800080c
 80007e8:	0800080c 	.word	0x0800080c
 80007ec:	0800080c 	.word	0x0800080c
 80007f0:	08000810 	.word	0x08000810

080007f4 <_init>:
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	bf00      	nop
 80007f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fa:	bc08      	pop	{r3}
 80007fc:	469e      	mov	lr, r3
 80007fe:	4770      	bx	lr

08000800 <_fini>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	bf00      	nop
 8000804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000806:	bc08      	pop	{r3}
 8000808:	469e      	mov	lr, r3
 800080a:	4770      	bx	lr
